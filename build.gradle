buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.ewerk.gradle.plugins.querydsl' version "1.0.10"
	id 'java'
	id 'org.asciidoctor.jvm.convert' version "3.3.2"
	id 'org.flywaydb.flyway' version '9.16.1' // flyway gradle plugin 의존성
	id 'org.sonarqube' version '3.5.0.2730' // sonarqube gradle plugin 의존성
	id 'jacoco' // jacoco gradle plugin 의존성
}

group = 'com.kustacks'
version = '1.1.2'
sourceCompatibility = '17'

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

sonarqube {
	properties {
		property "sonar.projectKey", "KU-Stacks_ku-ring-backend-web"
		property "sonar.organization", "kuring1234"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

dependencies {
	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework:spring-aspects'
	implementation 'org.springframework.session:spring-session:1.3.5.RELEASE'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-core:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	// password encoder
	implementation 'org.springframework.security:spring-security-crypto:5.7.5'

	// jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// monitoring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// flyway
	implementation 'org.flywaydb:flyway-core'

	// DevTool
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MockServer
	implementation 'org.mock-server:mockserver-netty:5.11.2'
	implementation 'org.mock-server:mockserver-client-java:5.11.2'

	// Jsoup
	implementation 'org.jsoup:jsoup:1.14.3'

	// Firebase
	implementation 'com.google.firebase:firebase-admin:8.1.0'

	// API Docs
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.rest-assured:rest-assured:4.2.0'

	// Test Container
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
	testImplementation 'org.testcontainers:testcontainers:1.17.6'
	testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
	testImplementation 'org.testcontainers:mariadb:1.17.6'
}

ext {
	snippetsDir = file 'build/generated-snippets'
}

test.onlyIf { System.getenv('DEPLOY_ENV') == 'dev' }

test {
	outputs.dir snippetsDir

	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}

	useJUnitPlatform()
	testLogging {
		// test jvm의 standard out and standard error을 console에 출력한다.
		showStandardStreams = true
		showCauses = true
		showExceptions = true
		showStackTraces = true
		exceptionFormat = 'full'
	}

	finalizedBy 'jacocoTestReport'
}

//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
	delete file('src/main/generated')
}

asciidoctor.onlyIf { System.getenv('DEPLOY_ENV') == 'dev' }

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
	attributes "snippets": snippetsDir,
				"version": version,
				"stylesheet": "asciitheme/clean.css"

	doFirst {
		println "=====Start asciidoctor"
		//asciidoctor 실행전 기존에 생성된 API 문서 삭제
		delete file('src/main/resources/static/docs/api-docs.html')
	}

	doLast {
		println "=====Finish asciidoctor"
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/asciidoc/html5")
	// resources/static/docs 로 복사하여 서버가 돌아가고 있을때 /docs/index.html 로 접속하면 볼수 있음
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	enabled = true
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5") {
		into "static/docs"
	}
}

jar {
	enabled = false
	manifest {
		attributes 'Main-Class': 'com.kustacks.kuring.KuringApplication'
	}
}

// -- QueryDsl 설정 -------------------------------------------------------
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
compileQuerydsl.doFirst {
	if(file(querydslDir).exists())
		delete(file(querydslDir))
}
// -- Jacoco 설정 -------------------------------------------------------
jacoco {
	// jacoco version
	toolVersion = '0.8.8'
}

jacocoTestReport {
	dependsOn test
	reports {
		html.enabled true // 개발자용 html
		xml.enabled true // 소나큐브용, 경로를 추가하지 않아도 sonarcloud가 default 경로를 인식
		csv.enabled false
	}

	// QueryDSL은 분석에서 제외시켜야 함
	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') {
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Request.*',
							'**/*Response.*',
							'**/dto/**',
							'**/*Interceptor.*',
							'**/*Exception.*',
							'**/*Storage.*',
							'**/KuringApplication.*',
							'**/*Token.*',
							'**/*Converter.*',
							'**/*AdminController.*',
							'**/*Dialect.*'
					] + Qdomains)
				})
		)
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in '*.QA'..'*.QZ') {
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true // 활성화
			limit {
				element = 'CLASS'
				minimum = 0.0
			}

			excludes = [
					'**.*Request.*',
					'**.*Response.*',
					'**.*Dto.*',
					'**.*Interceptor.*',
					'**.*Exception.*',
					'**.*Storage.*',
					'**.KuringApplication.*',
					'**.*Token.*',
					'**.*Converter.*',
					'**.*AdminController.*',
					'**.*Dialect.*'
			] + Qdomains
		}
	}
}

task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
